// This file is generated by
// ./scripts/lib/generate_style_converters.dart

import Mapbox
import MapboxAnnotationExtension

class LayerPropertyConverter {
    class func addLineProperties(lineLayer: MGLLineStyleLayer, properties: [String: String]) {
        for (propertyName, propertyValue) in properties {
            let expression = interpretExpression(expression: propertyValue)
            switch propertyName {
                {{#lineStyles}}
                case "{{property}}":
                    lineLayer.{{function}} = expression;
                break;
                {{/lineStyles}}
                case "line-blur":
                    lineLayer.lineBlur = expression
                default:
                    break
            }
        }
    }

    class func addCircleProperties(circleLayer: MGLCircleStyleLayer, properties: [String: String]) {
        for (propertyName, propertyValue) in properties {
            let expression = interpretExpression(expression: propertyValue)
            switch propertyName {
                {{#circleStyles}}
                case "{{property}}":
                    lineLayer.{{function}} = expression;
                break;
                {{/circleStyles}}
                default:
                    break
            }
        }
    }

    class func addSymbolProperties(symbolLayer: MGLSymbolStyleLayer, properties: [String: String]) {
        for (propertyName, propertyValue) in properties {
            let expression = interpretExpression(expression: propertyValue)
            switch propertyName {
                {{#symbolStyles}}
                case "{{property}}":
                    lineLayer.{{function}} = expression;
                break;
                {{/symbolStyles}}
                default:
                    break
            }
        }
    }

    class func addFillProperties(fillLayer: MGLSFillStyleLayer, properties: [String: String]) {
        for (propertyName, propertyValue) in properties {
            let expression = interpretExpression(expression: propertyValue)
            switch propertyName {
                {{#fillStyles}}
                case "{{property}}":
                    fillLayer.{{function}} = expression;
                break;
                {{/fillStyles}}
                default:
                    break
            }
        }
    }
    
    private class func interpretExpression(expression: String) -> NSExpression? {
        do {
            let json = try JSONSerialization.jsonObject(with: expression.data(using: .utf8)!, options: [])
            return NSExpression.init(mglJSONObject: json)
        } catch {
        }
        return nil
    }
}
