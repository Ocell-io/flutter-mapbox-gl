// This file is generated by
// ./scripts/lib/generate_style_converters.dart

package com.mapbox.mapboxgl;

import com.mapbox.mapboxsdk.style.expressions.Expression;
import com.mapbox.mapboxsdk.style.layers.PropertyFactory;
import com.mapbox.mapboxsdk.style.layers.PropertyValue;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import static com.mapbox.mapboxgl.Convert.toMap;

class LayerPropertyConverter {

  static PropertyValue[] interpretLineLayerProperties(Object o) {
    final Map<String, String> data = (Map<String, String>) toMap(o);
    final List<PropertyValue> properties = new LinkedList();

    for (Map.Entry<String, String> entry : data.entrySet()) {
      Expression expression = Expression.Converter.convert(entry.getValue());
      switch (entry.getKey()) {
        {{#lineStyles}}
        case "{{property}}":
          properties.add(PropertyFactory.{{function}}(expression));
          break;
        {{/lineStyles}}
        default:
          break;
      }
    }

    return properties.toArray(new PropertyValue[properties.size()]);
  }

  static PropertyValue[] interpretSymbolLayerProperties(Object o) {
    final Map<String, String> data = (Map<String, String>) toMap(o);
    final List<PropertyValue> properties = new LinkedList();

    for (Map.Entry<String, String> entry : data.entrySet()) {
      Expression expression = Expression.Converter.convert(entry.getValue());
      switch (entry.getKey()) {
        {{#symbolStyles}}
        case "{{property}}":
          properties.add(PropertyFactory.{{function}}(expression));
          break;
        {{/symbolStyles}}
        default:
          break;
      }
    }

    return properties.toArray(new PropertyValue[properties.size()]);
  }

  static PropertyValue[] interpretCircleLayerProperties(Object o) {
    final Map<String, String> data = (Map<String, String>) toMap(o);
    final List<PropertyValue> properties = new LinkedList();

    for (Map.Entry<String, String> entry : data.entrySet()) {
      Expression expression = Expression.Converter.convert(entry.getValue());
      switch (entry.getKey()) {
        {{#circleStyles}}
        case "{{property}}":
          properties.add(PropertyFactory.{{function}}(expression));
          break;
        {{/circleStyles}}
        default:
          break;
      }
    }

    return properties.toArray(new PropertyValue[properties.size()]);
  }

  static PropertyValue[] interpretFillLayerProperties(Object o) {
    final Map<String, String> data = (Map<String, String>) toMap(o);
    final List<PropertyValue> properties = new LinkedList();

    for (Map.Entry<String, String> entry : data.entrySet()) {
      Expression expression = Expression.Converter.convert(entry.getValue());
      switch (entry.getKey()) {
        {{#fillStyles}}
        case "{{property}}":
          properties.add(PropertyFactory.{{function}}(expression));
          break;
        {{/fillStyles}}
        default:
          break;
      }
    }

    return properties.toArray(new PropertyValue[properties.size()]);
  }

}